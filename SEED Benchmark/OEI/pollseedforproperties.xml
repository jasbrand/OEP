<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers"
      xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd">

  <flow name="pollseedforpropertiesFlow">
    <poll doc:name="Poll">
      <schedulers:cron-scheduler expression="${cron.timer}"/>
      <http:request config-ref="SEED_API" path="/organizations" method="GET" doc:name="HTTP: GET organization id"/>
    </poll>

    <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
    <set-variable variableName="ErrorLog" value="" doc:name="Variable: Declare Error Log"/>
    <set-variable variableName="IndicationLabel" value="${SEED.IndicationLabel}"
                  doc:name="Variable: Store the SEED Indication Label from configuration"/>
    <foreach collection="#[payload.organizations]" doc:name="For Each">
      <set-variable variableName="organization_id" value="#[payload.org_id]" doc:name="Variable"/>
      <logger message="Calling for properties for Org ID: #[flowVars.organization_id]" level="INFO" doc:name="Logger"/>
      <flow-ref name="getpropertiesfororg" doc:name="getpropertiesfororg"/>
    </foreach>
    <choice doc:name="Choice">
      <when expression="#[flowVars.ErrorLog.length() &gt; 0]">
        <flow-ref name="ErrorHandler" doc:name="ErrorHandler"/>
      </when>
      <otherwise>
        <logger message="#[flowVars.ErrorLog]" level="INFO" doc:name="Logger"/>
      </otherwise>
    </choice>
    <scripting:component doc:name="Groovy: write date processed to local file">
      <scripting:script engine="Groovy">
        <![CDATA[return new Date().format('yyyy-MM-dd HH:mm:ss.SSS');]]></scripting:script>
    </scripting:component>
    <file:outbound-endpoint path="/tmp/oep" outputPattern="lastReadDate.txt" responseTimeout="10000" doc:name="File"/>
    <catch-exception-strategy doc:name="Catch Exception Strategy"
                              doc:description="Exception handling for the C2M listener">
      <set-variable variableName="ErrorLog"
                    value="#[flowVars.ErrorLog + &quot;\n \n [Info1] &quot; + exception.getEvent() + &quot;with the following details: \n&quot; + exception.getCauseException()]"
                    doc:name="Variable: Update Error Log"/>
      <flow-ref name="ErrorHandler" doc:name="ErrorHandler"/>
    </catch-exception-strategy>
  </flow>
  <flow name="getpropertiesfororg" processingStrategy="synchronous">
    <set-variable variableName="SeedPath"
                  value="/labels/filter/?inventory_type=property_view&amp;organization_id=#[flowVars.organization_id]"
                  doc:name="Variable"/>
    <http:request config-ref="SEED_API"
                  path="/labels/filter/?inventory_type=property_view&amp;organization_id=#[flowVars.organization_id]"
                  method="POST" doc:name="HTTP: Get all labels for my organization"/>
    <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
    <scripting:transformer doc:name="Groovy: only look at properties with the 'Add to Salesforce' Label">
      <scripting:script engine="Groovy">
        <![CDATA[return payload.find { it.name == flowVars.IndicationLabel }]]></scripting:script>
    </scripting:transformer>
    <foreach collection="#[payload.is_applied]" doc:name="For Each">
      <logger message="Getting details from SEED for property: #[payload]" level="INFO" doc:name="Logger"/>
      <flow-ref name="GetPropertyDetailsFromSEED" doc:name="GetPropertyDetailsFromSEED"/>
    </foreach>
    <catch-exception-strategy doc:name="Catch Exception Strategy">
      <set-variable variableName="ErrorLog"
                    value="#['Calling ' + ${SEED.url}  + flowVars.SeedPath + ' resulted in the response:  \n \n ' + message.payloadAs(java.lang.String)]"
                    doc:name="Variable"/>
      <flow-ref name="ErrorHandler" doc:name="Flow Reference"/>
    </catch-exception-strategy>
  </flow>
  <flow name="GetPropertyDetailsFromSEED">
    <set-variable variableName="PropertyId" value="#[payload]" doc:name="Variable: SEED Property Id"/>
    <http:request config-ref="SEED_API" path="/properties/#[payload]/?organization_id=#[flowVars.organization_id]"
                  method="GET" doc:name="HTTP: Call for Details"/>
    <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
    <set-variable variableName="PropertyDetails" value="#[payload]" doc:name="Variable: Property Details"/>
    <set-variable variableName="PropertyName" value="#[flowVars.PropertyDetails.state.property_name]"
                  doc:name="Variable: SEED Property Name"/>
    <set-variable variableName="updatedDate" value="#[flowVars.PropertyDetails.property.updated]"
                  doc:name="Variable: Get Updated Date"/>
    <scripting:component doc:name="Groovy: get the last processed dates for comparison ">
      <scripting:script engine="Groovy"><![CDATA[import java.util.GregorianCalendar;
import java.util.Calendar;
import java.util.Date;
import java.text.SimpleDateFormat

def file = new File('/tmp/oep/lastReadDate.txt');
String fileContents = file.exists() ? file.text : '2001-01-01 12:00:00.000';

SimpleDateFormat sdf = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS');
Date date = sdf.parse(fileContents);
Calendar c = Calendar.getInstance();
c.setTime(date);
c.add(Calendar.DATE, -1);

Date seedUpdatedDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'", flowVars.updatedDate);
Date seedDate = sdf.parse(seedUpdatedDate.format('yyyy-MM-dd HH:mm:ss.SSS'));
message.setInvocationProperty('seedDate', seedDate);

return sdf.parse(sdf.format(c.getTime()));


]]></scripting:script>
    </scripting:component>
    <expression-filter expression="#[flowVars.seedDate &gt; payload]"
                       doc:name="Expression: Filter anything not recently updated"/>
    <logger message="Getting details for labels from Property: #[flowVars.PropertyDetails.property.id]" level="INFO"
            doc:name="Logger"/>
    <set-variable variableName="labelNames" value="#[[]]" doc:name="Variable: Array of Label Names"/>
    <set-payload value=" #[flowVars.PropertyDetails.labels]" mimeType="application/json" doc:name="Set Payload"/>
    <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
    <foreach doc:name="For Each">
      <set-variable variableName="LabelID" value="#[payload]" doc:name="Variable"/>
      <http:request config-ref="SEED_API" path="/labels/#[payload]" method="GET" doc:name="HTTP: Get label name"/>
      <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
      <expression-transformer
      expression="#[payload != null ? flowVars.labelNames.add(payload.name) : flowVars.labelNames ]"
      doc:name="Expression: Add the label name to the collection"/>
    </foreach>
    <set-variable variableName="ViolationStatus" value="${SEED.ViolationLabel}"
                  doc:name="Variable: Set Violation Text"/>
    <set-variable variableName="CompliedStatus" value="${SEED.CompliedLabel}" doc:name="Variable: Set Complied Text"/>
    <set-variable variableName="IsInViolation"
                  value="#[flowVars.labelNames.contains(flowVars.ViolationStatus) ? true : false]"
                  doc:name="Variable: Does this property Comply?"/>
    <scripting:transformer doc:name="Flatten List of label names">
      <scripting:script engine="Groovy"><![CDATA[return flowVars.labelNames.join("; ")]]></scripting:script>
    </scripting:transformer>
    <set-variable variableName="labelNameString" value="#[payload]"
                  doc:name="Variable: Keep semicolon separated list of label names for later"/>
    <choice doc:name="Choice">
      <when
      expression="#[flowVars.labelNames.contains(flowVars.CompliedStatus) &amp;&amp; !flowVars.labelNames.contains(flowVars.ViolationStatus)]">
        <flow-ref name="QuerySFforContactAndAccount" doc:name="QuerySFforContactAndAccount"/>
                <flow-ref name="QuerySFforAdminContactAndAccount" doc:name="QuerySFforAdminContactAndAccount"/>
        <flow-ref name="PushPropertytoSalesforce" doc:name="PushPropertytoSalesforce"/>
      </when>
      <when
      expression="#[flowVars.labelNames.contains(flowVars.ViolationStatus) &amp;&amp; !flowVars.labelNames.contains(flowVars.CompliedStatus)]">
        <flow-ref name="QuerySFforContactAndAccount" doc:name="QuerySFforContactAndAccount"/>
                <flow-ref name="QuerySFforAdminContactAndAccount" doc:name="QuerySFforAdminContactAndAccount"/>
        <flow-ref name="PushPropertytoSalesforce" doc:name="PushPropertytoSalesforce"/>
      </when>
      <when
      expression="#[flowVars.labelNames.contains(flowVars.ViolationStatus) &amp;&amp; flowVars.labelNames.contains(flowVars.CompliedStatus)]">
        <set-variable variableName="ErrorLog"
                      value="#[flowVars.ErrorLog + &quot;\n \n [Error1] SEED property: &quot; + flowVars.PropertyDetails.state.property_name + &quot;, SEED Id: &quot; + flowVars.PropertyId + &quot;. Both '&quot; + flowVars.CompliedStatus + &quot;' AND '&quot; + flowVars.ViolationStatus + &quot;' labels have been applied to this property so no action will be taken.&quot; ]"
                      doc:name="Variable: Error Log (both Complied and Violation statuses exist)"/>
      </when>
      <otherwise>
        <set-variable variableName="ErrorLog"
                      value="#[flowVars.ErrorLog + &quot;\n \n [Error1] SEED property: &quot; + flowVars.PropertyDetails.state.property_name + &quot;, SEED Id: &quot; + flowVars.PropertyId + &quot;. Neither '&quot; + flowVars.CompliedStatus + &quot;' or '&quot; + flowVars.ViolationStatus + &quot;' labels have been applied to this property so no action will be taken.&quot; ]"
                      doc:name="Variable: Error Log"/>
      </otherwise>
    </choice>
    <catch-exception-strategy doc:name="pollseedforpropertiesCatch_Exception_Strategy">
      <set-variable variableName="ErrorLog"
                    value="#[flowVars.ErrorLog + &quot;\n \n [Error4] SEED Label: '&quot; + flowVars.LabelID + &quot;' assigned to Property: &quot; + flowVars.PropertyName + &quot; has no details in SEED. &quot;]"
                    doc:name="Variable"/>
      <set-variable variableName="ErrorLog"
                    value="#[flowVars.ErrorLog + &quot;.  \n As a result the SEED property named: [(&quot;  + flowVars.PropertyName + &quot;),  Seed ID: (&quot; + flowVars.PropertyId + &quot;)] will not be updated in Salesforce until the issue is resolved.  Confirm that the unavailable SEED label is removed from this property.&quot;]"
                    doc:name="Variable"/>
    </catch-exception-strategy>
  </flow>
    <sub-flow name="QuerySFforContactAndAccount">
    <set-variable variableName="contactEmail"
                  value="#[flowVars.PropertyDetails.state.extra_data[&quot;Email&quot;].trim()]"
                  doc:name="Variable: Contact Email useful for getting SF Account"/>

    <set-variable variableName="ContactName"
                  value="#[flowVars.PropertyDetails.state.extra_data[&quot;On Behalf Of&quot;]]"
                  doc:name="Variable: Contact Name"/>


    <sfdc:query-single config-ref="Testbed-Salesforce"
                       query="Select Id, Email, Account.Name from Contact where Email = '#[flowVars.contactEmail]'"
                       doc:name="Salesforce: Call for Contact and Account details"/>
    <choice doc:name="Choice">
      <when expression="#[payload != null]">
        <set-variable variableName="ContactResults" value="#[payload.Id]" doc:name="Variable: Contact details"/>
      </when>
      <otherwise>
        <flow-ref name="CreateContactAndAccount" doc:name="CreateContactAndAccount"/>
      </otherwise>
    </choice>
  </sub-flow>
  <flow name="CreateContactAndAccount">
    <set-variable variableName="AccountName"
                  value="#[flowVars.PropertyDetails.state.extra_data[&quot;Organization&quot;].trim()]"
                  doc:name="Variable: SF Account Name"/>
    <sfdc:query-single config-ref="Testbed-Salesforce"
                       query="Select Id from Account where Name = '#[flowVars.AccountName.replace(&quot;'&quot;, &quot;\\'&quot;)]'"
                       doc:name="Salesforce: Get Account if available"/>
    <choice doc:name="Choice">
      <when expression="#[payload != null]">
        <logger message="Found Account with Name: #[flowVars.AccountName]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="SFAccountId" value="#[payload.Id]" doc:name="Variable: SF Account Id"/>
      </when>
      <otherwise>
        <set-variable variableName="DefaultAccountRecordType" value="${salesforce.DefaultAccountType}"
                      doc:name="Variable: Default record type"/>
        <scripting:transformer doc:name="Groovy: map name and record type to new Account">
          <scripting:script engine="Groovy" file="AccountToSalesforce.groovy"/>
        </scripting:transformer>
        <sfdc:create config-ref="Testbed-Salesforce" type="Account" doc:name="Salesforce: Create a new Account">
          <sfdc:objects ref="#[payload]"/>
        </sfdc:create>
        <choice doc:name="Choice">
          <when expression="#[payload[0].success == 'false']">
            <logger message="#['Error: ' +  payload]" level="INFO" doc:name="Logger"/>
          </when>
          <otherwise>
            <set-variable variableName="SFAccountId" value="#[payload[0].id]"
                          doc:name="Variable: Set the SF Account ID"/>
          </otherwise>
        </choice>

      </otherwise>
    </choice>
    <scripting:transformer doc:name="Groovy: map fields to new Contact">
      <scripting:script engine="Groovy" file="ContactToSalesforce.groovy"/>
    </scripting:transformer>
    <sfdc:create config-ref="Testbed-Salesforce" type="Contact" doc:name="Salesforce: Create a new SF contact">
      <sfdc:objects ref="#[payload]"/>
    </sfdc:create>
    <set-variable variableName="ContactResults" value="#[payload[0].id]" doc:name="Variable: Save the SF Contact Id"/>
    <catch-exception-strategy doc:name="pollseedforpropertiesCatch_Exception_Strategy">
      <set-variable variableName="ErrorLog"
                    value="#[flowVars.ErrorLog + &quot;\n \n [Error4] Salesforce Account: '&quot; + flowVars.AccountName + &quot;' with Salesforce Contact email: '&quot; + flowVars.contactEmail + &quot;' aren't already objects in Salesforce but could not be created due to:  ==&gt; &quot; +exception.cause.?message or exception.cause]"
                    doc:name="Variable"/>
      <set-variable variableName="ErrorLog"
                    value="#[flowVars.ErrorLog + &quot;.  \n As a result the SEED property named: [(&quot;  + flowVars.PropertyName + &quot;),  Seed ID: (&quot; + flowVars.PropertyId + &quot;)] will not be updated in Salesforce until the issue is resolved.  Confirm that the SEED 'Organization' field&#160;has an exact match with the Salesforce 'Account Name'. If they do not match then update one so that they do.&quot;]"
                    doc:name="Variable"/>
    </catch-exception-strategy>
  </flow>
  <sub-flow name="QuerySFforAdminContactAndAccount">
        <set-payload value="#[flowVars.PropertyDetails.state.extra_data[&quot;Property Data Administrator - Email&quot;]]" doc:name="Set Payload: Property Data Administrator &#8211; Email"/>
        <expression-filter expression="#[payload != null]" doc:name="Expression"/>
        <set-variable variableName="contactEmail" value="#[payload.trim()]" doc:name="Variable: Contact Email useful for getting SF Account"/>

    <set-variable variableName="ContactName"
                  value="#[flowVars.PropertyDetails.state.extra_data[&quot;Property Data Administrator&quot;]]"
                  doc:name="Variable: Contact Name"/>


    <sfdc:query-single config-ref="Testbed-Salesforce"
                       query="Select Id, Email, Account.Name from Contact where Email = '#[flowVars.contactEmail]'"
                       doc:name="Salesforce: Call for Contact and Account details"/>
    <choice doc:name="Choice">
      <when expression="#[payload != null]">
        <set-variable variableName="AdminContactResults" value="#[payload.Id]" doc:name="Variable: Contact details"/>
      </when>
      <otherwise>
        <flow-ref name="CreateAdminContactAndAccount" doc:name="CreateContactAndAccount"/>
      </otherwise>
    </choice>
  </sub-flow>
  <flow name="CreateAdminContactAndAccount">
    <set-variable variableName="AccountName"
                  value="#[flowVars.PropertyDetails.state.extra_data[&quot;Organization&quot;].trim()]"
                  doc:name="Variable: SF Account Name"/>
    <sfdc:query-single config-ref="Testbed-Salesforce"
                       query="Select Id from Account where Name = '#[flowVars.AccountName.replace(&quot;'&quot;, &quot;\\'&quot;)]'"
                       doc:name="Salesforce: Get Account if available"/>
    <choice doc:name="Choice">
      <when expression="#[payload != null]">
        <logger message="Found Account with Name: #[flowVars.AccountName]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="SFPropertyAdminAccountId" value="#[payload.Id]" doc:name="Variable: SF Account Id"/>
      </when>
      <otherwise>
        <set-variable variableName="DefaultAccountRecordType" value="${salesforce.DefaultAccountType}"
                      doc:name="Variable: Default record type"/>
        <scripting:transformer doc:name="Groovy: map name and record type to new Account">
          <scripting:script engine="Groovy" file="AccountToSalesforce.groovy"/>
        </scripting:transformer>
        <sfdc:create config-ref="Testbed-Salesforce" type="Account" doc:name="Salesforce: Create a new Account">
          <sfdc:objects ref="#[payload]"/>
        </sfdc:create>
        <choice doc:name="Choice">
          <when expression="#[payload[0].success == 'false']">
            <logger message="#['Error: ' +  payload]" level="INFO" doc:name="Logger"/>
          </when>
          <otherwise>
            <set-variable variableName="SFPropertyAdminAccountId" value="#[payload[0].id]"
                          doc:name="Variable: Set the SF Property Admin Account ID"/>
          </otherwise>
        </choice>

      </otherwise>
    </choice>
        <scripting:transformer doc:name="Groovy: map fields to new Contact">
            <scripting:script engine="Groovy" file="ContactToSalesforce.groovy"/>
        </scripting:transformer>

    <sfdc:create config-ref="Testbed-Salesforce" type="Contact" doc:name="Salesforce: Create a new SF contact">
      <sfdc:objects ref="#[payload]"/>
    </sfdc:create>
    <set-variable variableName="AdminContactResults" value="#[payload[0].id]" doc:name="Variable: Save the SF Contact Id"/>
    <catch-exception-strategy doc:name="pollseedforpropertiesCatch_Exception_Strategy">
      <set-variable variableName="ErrorLog"
                    value="#[flowVars.ErrorLog + &quot;\n \n [Error4] Salesforce Account: '&quot; + flowVars.AccountName + &quot;' with Salesforce Contact email: '&quot; + flowVars.contactEmail + &quot;' aren't already objects in Salesforce but could not be created due to:  ==&gt; &quot; +exception.cause.?message or exception.cause]"
                    doc:name="Variable"/>
      <set-variable variableName="ErrorLog"
                    value="#[flowVars.ErrorLog + &quot;.  \n As a result the SEED property named: [(&quot;  + flowVars.PropertyName + &quot;),  Seed ID: (&quot; + flowVars.PropertyId + &quot;)] will not be updated in Salesforce until the issue is resolved.  Confirm that the SEED 'Organization' field&#160;has an exact match with the Salesforce 'Account Name'. If they do not match then update one so that they do.&quot;]"
                    doc:name="Variable"/>
    </catch-exception-strategy>
  </flow>

  <sub-flow name="PushPropertytoSalesforce">
    <choice doc:name="Choice">
      <when expression="#[flowVars.IsInViolation]">
        <scripting:component doc:name="Groovy: Map In Violation Property To SF Benchmark">
          <scripting:script engine="Groovy"><![CDATA[def property = flowVars["PropertyDetails"].state;
def propData = property.extra_data;

message.setInvocationProperty('SFPremiseId', propData["Benchmark Salesforce ID"]);

Property =
[
	Id: propData["Benchmark Salesforce ID"],
	oei__Contact_Name__c: flowVars["ContactResults"],
	oei_Property_Data_Administrator__c: flowVars["AdminContactResults"],
	oei__Status__c: flowVars["IsInViolation"] ? flowVars["ViolationStatus"] : flowVars["CompliedStatus"],
	oei__SEED_Labels__c: flowVars["labelNameString"]
]

return [Property]]]></scripting:script>
        </scripting:component>
      </when>
      <otherwise>
        <scripting:component doc:name="Groovy: Map Complied Property To SF Benchmark">
          <scripting:script engine="Groovy" file="SEEDPropertyToSFBenchmark.groovy"/>
        </scripting:component>
      </otherwise>
    </choice>
    <choice doc:name="Choice">
      <when expression="#[flowVars.SFPremiseId == '' || flowVars.SFPremiseId == null]">
        <set-variable variableName="ErrorLog"
                      value="#[flowVars.ErrorLog + &quot;\n \n [Error2] SEED property: &quot; + flowVars.PropertyDetails.state.property_name + &quot;, SEED property ID: &quot; + flowVars.PropertyId + &quot; 'Benchmark Salesforce ID' field is missing, there is no Salesforce object destination so no action will be taken.&quot;]"
                      doc:name="Variable: update ErrorLog"/>
      </when>
      <otherwise>
                <sfdc:update config-ref="Testbed-Salesforce" type="oei__Benchmark__c" doc:name="Salesforce: Update Benchmark">
                    <sfdc:objects ref="#[payload]"/>
                </sfdc:update>

        <choice doc:name="Choice">
          <when expression="#[payload[0].success == 'false']">
            <set-variable variableName="ErrorLog"
                          value="#[flowVars.ErrorLog + &quot;\n \n [Error3] For SEED property: &quot; + flowVars.PropertyDetails.state.property_name + &quot;, SEED Id: &quot; + flowVars.PropertyId + &quot; There was an error when updating Salesforce, which returned the following message: \n &quot; + payload[0].wrapped.errors[0].message]"
                          doc:name="Variable: Update Error Log"/>
          </when>
          <otherwise>
            <logger message="#[payload]" level="INFO" doc:name="Logger"/>
          </otherwise>
        </choice>
      </otherwise>
    </choice>
  </sub-flow>
</mule>